@MISC{Sulzmann07systemf,
    author = {Martin Sulzmann and Manuel M. T. Chakravarty and Simon Peyton Jones and Kevin Donnelly},
    title = {System F with type equality coercions},
    year = {2007}
}
@MISC{Marlow98thenew,
    author = {Simon Marlow and Simon Peyton Jones},
    title = {The New GHC/Hugs Runtime System},
    year = {1998}
}
@techreport{LTU,
    author = {Steele, Guy L.},
    citeulike-article-id = {1325},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=889239},
    keywords = {history, pl, scheme},
    posted-at = {2012-07-02 07:49:38},
    priority = {0},
    publisher = {Massachusetts Institute of Technology},
    title = {{LAMBDA}: The Ultimate Declarative},
    url = {http://portal.acm.org/citation.cfm?id=889239},
    year = {1976}
}
@MISC{ExcAnalysis,
    author = {Xavier Leroy and François Pessaux},
    title = {Type-Based Analysis of Uncaught Exceptions},
    year = {1998}
}
@book{TAPL,
 author = {Pierce, Benjamin C.},
 title = {Types and programming languages},
 year = {2002},
 isbn = {0-262-16209-1},
 publisher = {MIT Press},
 address = {Cambridge, MA, USA},
}
@article{LambdaCube,
  author    = {Henk Barendregt},
  title     = {Introduction to Generalized Type Systems},
  journal   = {J. Funct. Program.},
  volume    = {1},
  number    = {2},
  year      = {1991},
  pages     = {125-154},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@MISC{Odersky02anominal,
    author = {Martin Odersky and Vincent Cremet and Christine Röckl and Matthias Zenger},
    title = {A Nominal Theory of Objects with Dependent Types},
    year = {2002}
}
@article{LeFessant:2001:OPM:507669.507641,
 author = {Le Fessant, Fabrice and Maranget, Luc},
 title = {Optimizing pattern matching},
 journal = {SIGPLAN Not.},
 issue_date = {October 2001},
 volume = {36},
 number = {10},
 month = oct,
 year = {2001},
 issn = {0362-1340},
 pages = {26--37},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/507546.507641},
 doi = {10.1145/507546.507641},
 acmid = {507641},
 publisher = {ACM},
 address = {New York, NY, USA},
} 
@inproceedings{Maranget:2008:CPM:1411304.1411311,
 author = {Maranget, Luc},
 title = {Compiling pattern matching to good decision trees},
 booktitle = {Proceedings of the 2008 ACM SIGPLAN workshop on ML},
 series = {ML '08},
 year = {2008},
 isbn = {978-1-60558-062-3},
 location = {Victoria, BC, Canada},
 pages = {35--46},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1411304.1411311},
 doi = {10.1145/1411304.1411311},
 acmid = {1411311},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {decision trees, heuristics, match compilers},
}
@INPROCEEDINGS{Reynolds94anintroduction,
    author = {John C. Reynolds},
    title = {An Introduction to Polymorphic Lambda Calculus},
    booktitle = {Logical Foundations of Functional Programming},
    year = {1994},
    pages = {77--86},
    publisher = {Addison-Wesley}
}
@article{Landin,
 author = {Landin, P. J.},
 title = {The next 700 programming languages},
 journal = {Commun. ACM},
 issue_date = {March 1966},
 volume = {9},
 number = {3},
 month = mar,
 year = {1966},
 issn = {0001-0782},
 pages = {157--166},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/365230.365257},
 doi = {10.1145/365230.365257},
 acmid = {365257},
 publisher = {ACM},
 address = {New York, NY, USA},
} 
@article{MorrisettWCG99,
  author = {Greg Morrisett and David Walker and Karl Crary and Neal Glew},
  title = {From {System F} to typed assembly language},
  journal = {ACM Trans. Program. Lang. Syst.},
  volume = {21},
  number = {3},
  year = {1999},
  issn = {0164-0925},
  pages = {527--568},
  publisher = {ACM},
  address = {New York, NY, USA},
  abstract = {We motivate the design of typed assembly language (TAL) and present a type-preserving ttranslation from Systemn F to TAL. The typed assembly language we pressent is based on a conventional RISC assembly language, but its static type sytem provides support for enforcing high-level language abstratctions, such as closures, tuples, and user-defined abstract data types. The type system ensures that well-typed programs cannot violatet these abstractionsl In addition, the typing constructs admit many low-level compiler optimiztaions. Our translation to TAL is specified as a sequence of type-preserving transformations, including CPS and closure conversion phases; type-correct source programs are mapped to type-correct assembly language. A key contribution is an approach to polymorphic closure conversion that is considerably simpler than previous work. The compiler and typed assembly lanugage provide a fully automatic way to produce certified code, suitable for use in systems where unstrusted and potentially malicious code must be checked for safety before execution.},
  pdf = {http://www.eecs.harvard.edu/~greg/papers/tal-toplas.pdf}
}
@ARTICLE{Wright92asyntactic,
    author = {Andrew K. Wright and Matthias Felleisen},
    title = {A Syntactic Approach to Type Soundness},
    journal = {Information and Computation},
    year = {1992},
    volume = {115},
    pages = {38--94}
}
